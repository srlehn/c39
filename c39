#!/usr/bin/env bash

# Copyright 2018 Simon Robin Lehn. All rights reserved.
# Use of this source code is governed by a MIT-style
# license that can be found in the LICENSE file.

# DEBUG
# set -x

# used for:
# code39 barcode width
WIDTH='50'

# width of the barcode lines
THICKLINEWIDTH='6'
THINLINEWIDTH='2'


################################################################################
Main(){
  [ -t 0 ] || set -- "$(</dev/stdin)" "$@"
  [ -z "$1" ] && return 0

  Padding

  STR_ENC="$(String2Code39 "$1")"
  STR_ENC2="$(EnlargeBarcode "$STR_ENC")"

  STR_SIX="$(Binary2SixelString "$STR_ENC2")"

  printf %s "$STR_SIX"
}


################################################################################
Padding(){
  printf %b '\n   '
}


################################################################################
Binary2SixelString(){
  [ $# -eq 1 ] || exit 1
  STR="$1"
  printf '\033Pq'
  while :; do
    STR_TMP="${STR:0:6}"
    # End sixel sequence
    { [ ${#STR_TMP} -eq 0 ] || [ "x$STR_TMP" != "x${STR_TMP//[!01]}" ]; } && { printf '\033\\'; exit 0; }
    [ ${#STR_TMP} -gt 0 ] && {
      STR_TMP+='00000'
      STR_TMP="${STR_TMP:0:6}"
    }
    
    printf '!%i%s$-' "$WIDTH" "$(Binary2SixelChar "$STR_TMP")"
    STR="${STR:6}"
  done
}


################################################################################
Binary2SixelChar(){
  STR_REV="${1:5:1}${1:4:1}${1:3:1}${1:2:1}${1:1:1}${1:0:1}"
  printf "\x$(printf %x "$((63+2#$STR_REV))")"
}


################################################################################
String2Code39(){
  STR39="${1^^}"
  STR39="*${STR39//\*}*"
  RET=''
  for ((i=0; i<"${#STR39}"; i++)); do
    [ "$i" -ne '0' ] && RET+='0'
    case "${STR39:$i:1}" in
      '1') RET+='110100101011';;
      '2') RET+='101100101011';;
      '3') RET+='110110010101';;
      '4') RET+='101001101011';;
      '5') RET+='110100110101';;
      '6') RET+='101100110101';;
      '7') RET+='101001011011';;
      '8') RET+='110100101101';;
      '9') RET+='101100101101';;
      '0') RET+='101001101101';;
      'A') RET+='110101001011';;
      'B') RET+='101101001011';;
      'C') RET+='110110100101';;
      'D') RET+='101011001011';;
      'E') RET+='110101100101';;
      'F') RET+='101101100101';;
      'G') RET+='101010011011';;
      'H') RET+='110101001101';;
      'I') RET+='101101001101';;
      'J') RET+='101011001101';;
      'K') RET+='110101010011';;
      'L') RET+='101101010011';;
      'M') RET+='110110101001';;
      'N') RET+='101011010011';;
      'O') RET+='110101101001';;
      'P') RET+='101101101001';;
      'Q') RET+='101010110011';;
      'R') RET+='110101011001';;
      'S') RET+='101101011001';;
      'T') RET+='101011011001';;
      'U') RET+='110010101011';;
      'V') RET+='100110101011';;
      'W') RET+='110011010101';;
      'X') RET+='100101101011';;
      'Y') RET+='110010110101';;
      'Z') RET+='100110110101';;
      '-') RET+='100101011011';;
      '.') RET+='110010101101';;
      ' ') RET+='100110101101';;

      # special char
      # start/end of string
      '*') RET+='100101101101';;

        # default
        # *) RET+='110010101101';;   # '.'
        *) RET+='100101011011';;   # '-'
    esac
  done
  printf %s "$RET"
}


################################################################################
EnlargeBarcode(){
  [ ${#THICKLINEWIDTH} -gt 0 ] && [ ${#THINLINEWIDTH} -gt 0 ] && \
  [ -z "${THICKLINEWIDTH//[0-9]}" ] && [ -z "${THINLINEWIDTH//[0-9]}" ] && \
  [ "$THICKLINEWIDTH" -ge 2 ] && [ "$THINLINEWIDTH"  -ge 1 ] && \
  [ "$THICKLINEWIDTH" -gt "$THINLINEWIDTH" ] || \
  { echo 'Invalid line widths.' >&2; exit 1; }

  THICKLINE="$(eval printf 1%.0s {1.."${THICKLINEWIDTH//[!0-9]}"})"
  THINLINE="$( eval printf 1%.0s {1.."${THINLINEWIDTH//[!0-9]}"})"

  [ ${#THICKLINE} -ge 2 ] && [ ${#THINLINE} -ge 1 ] && [ ${#THICKLINE} -gt ${#THINLINE} ] || { exit 1; }

  <<<"$1" LC_ALL=C \
  sed '
    #:a;s/\(^\|0\)11\($\|0\)/\1'"${THICKLINE//?/1}"'\2/g;ta
    #:b;s/\(^\|0\)1\($\|0\)/\1'"${THINLINE//?/1}"'\2/g;tb
    #:c;s/\(^\|1\)00\($\|1\)/\1'"${THICKLINE//?/0}"'\2/g;tc
    #:d;s/\(^\|1\)0\($\|1\)/\1'"${THINLINE//?/0}"'\2/g;td

    :a;s/\(^\|[^1]\)11\($\|[^12]\)/\1'"${THICKLINE//?/1}"'2\2/g;ta
    :b;s/\(^\|[^1]\)1\($\|[^12]\)/\1'"${THINLINE//?/1}"'2\2/g;tb
    :c;s/\(^\|[^0]\)00\($\|[^02]\)/\1'"${THICKLINE//?/0}"'2\2/g;tc
    :d;s/\(^\|[^0]\)0\($\|[^02]\)/\1'"${THINLINE//?/0}"'2\2/g;td
    s/2//g
  '
}


################################################################################
Main "$@"
